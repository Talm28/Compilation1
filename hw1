%{
	
	#include <stdio.h>
	void {printToken(char *);
	#ifndef TOKENS_HPP_ 
	#define TOKENS_HPP_ 
	enum tokentype {
	 VOID = 1, INT = 2, BYTE = 3, B = 4, BOOL = 5, AND = 6, OR = 7, NOT = 8, TRUE = 9, FALSE = 10, RETURN = 11, IF = 12, ELSE = 13, WHILE = 14, BREAK = 15, CONTINUE = 16, SC = 17, COMMA = 18, LPAREN = 19, RPAREN = 20, LBRACE = 21, RBRACE = 22, ASSIGN = 23, RELOP = 24, BINOP = 25, COMMENT = 26, ID = 27, NUM = 28, STRING = 29 };
	  extern int yylineno; extern char* yytext; extern int yyleng; extern int yylex();
	 #endif /* TOKENS_HPP_ */
	 void {printToken(tokentype);}
%}


%option yylineno
%option noyywrap
digit [0-9]
letter [a-zA-Z]
whitespace [\t ]
relativeoperator [<>=!]=?
comment \\\\[.]*\n
binaryoperator [*+\\-]
id [letter][digit|letter]*
number [digit]+
string \"[.\n]\"

%%
void {printToken(VOID);} 
int {printToken(INT);}
byte {printToken(BYTE);} 
b {printToken(B);}
bool {printToken(BOOL);}
and {printToken(AND);}
or {printToken(OR);}
not {printToken(NOT);}
true {printToken(TRUE);}
false {printToken(FALSE)};
return {printToken(RETURN);}
if {printToken(IF);}
else {printToken(ELSE);}
 while {printToken(WHILE);}
break {printToken(BREAK);} 
continue {printToken(CONTINUE);}
; {printToken(SC);} 
, {printToken(COMMA);}
\( {printToken(LPAREN});}
\) {printToken(RPAREN});}
\{ {printToken(LBRACE);}
\} {printToken(RBRACE);}
= {printToken(ASSIGN);}
relativeoperator {printToken(RELOP);}
binaryoperator {printToken(BINOP); }
comment {printToken(COMMENT);} 
id {printToken(ID);}
number {printToken(NUMBER);}
string {printToken(STRING);}
. {;}



%%

printToken(tokentype name)
{
	printf("%d %s %s\n", yylineno, name, yytext);
}